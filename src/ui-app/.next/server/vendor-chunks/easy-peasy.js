"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/easy-peasy";
exports.ids = ["vendor-chunks/easy-peasy"];
exports.modules = {

/***/ "(ssr)/./node_modules/easy-peasy/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/easy-peasy/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreProvider: () => (/* binding */ StoreProvider),\n/* harmony export */   action: () => (/* binding */ action),\n/* harmony export */   actionOn: () => (/* binding */ actionOn),\n/* harmony export */   computed: () => (/* binding */ computed),\n/* harmony export */   createContextStore: () => (/* binding */ createContextStore),\n/* harmony export */   createStore: () => (/* binding */ createStore),\n/* harmony export */   createStoreActionsHook: () => (/* binding */ createStoreActionsHook),\n/* harmony export */   createStoreDispatchHook: () => (/* binding */ createStoreDispatchHook),\n/* harmony export */   createStoreRehydratedHook: () => (/* binding */ createStoreRehydratedHook),\n/* harmony export */   createStoreStateHook: () => (/* binding */ createStoreStateHook),\n/* harmony export */   createTransform: () => (/* binding */ createTransform),\n/* harmony export */   createTypedHooks: () => (/* binding */ createTypedHooks),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   effectOn: () => (/* binding */ effectOn),\n/* harmony export */   generic: () => (/* binding */ generic),\n/* harmony export */   initializeUseStoreState: () => (/* binding */ initializeUseStoreState),\n/* harmony export */   persist: () => (/* binding */ persist),\n/* harmony export */   reducer: () => (/* binding */ reducer),\n/* harmony export */   thunk: () => (/* binding */ thunk),\n/* harmony export */   thunkOn: () => (/* binding */ thunkOn),\n/* harmony export */   useLocalStore: () => (/* binding */ useLocalStore),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStoreActions: () => (/* binding */ useStoreActions),\n/* harmony export */   useStoreDispatch: () => (/* binding */ useStoreDispatch),\n/* harmony export */   useStoreRehydrated: () => (/* binding */ useStoreRehydrated),\n/* harmony export */   useStoreState: () => (/* binding */ useStoreState)\n/* harmony export */ });\n/* harmony import */ var use_sync_external_store_shim_with_selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/es/redux.js\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/es/index.js\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var fast_deep_equal_es6__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-deep-equal/es6 */ \"(ssr)/./node_modules/fast-deep-equal/es6/index.js\");\n/* harmony import */ var fast_deep_equal_es6__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal_es6__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\nvar StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nvar useNotInitialized = function useNotInitialized() {\n    throw new Error(\"uSES not initialized!\");\n};\nvar useSyncExternalStoreWithSelector = useNotInitialized;\nvar initializeUseStoreState = function initializeUseStoreState(fn) {\n    useSyncExternalStoreWithSelector = fn;\n};\nvar refEquality = function refEquality(a, b) {\n    return a === b;\n};\nfunction createStoreStateHook(Context) {\n    return function useStoreState(mapState, equalityFn) {\n        if (equalityFn === void 0) {\n            equalityFn = refEquality;\n        }\n        if (true) {\n            if (!mapState) {\n                throw new Error(\"You must pass a selector to useStoreState\");\n            }\n            if (typeof mapState !== \"function\") {\n                throw new Error(\"You must pass a function as a selector to useStoreState\");\n            }\n            if (typeof equalityFn !== \"function\") {\n                throw new Error(\"You must pass a function as an equality function to useStoreState\");\n            }\n        }\n        var store = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Context);\n        /*\r\n    function useSyncExternalStoreWithSelector<Snapshot, Selection>(\r\n        subscribe: (onStoreChange: () => void) => () => void,\r\n        getSnapshot: () => Snapshot,\r\n        getServerSnapshot: undefined | null | (() => Snapshot),\r\n        selector: (snapshot: Snapshot) => Selection,\r\n        isEqual?: (a: Selection, b: Selection) => boolean,\r\n    ): Selection;\r\n    */ var selectedState = useSyncExternalStoreWithSelector(store.subscribe, store.getState, store.getState, // getServerSnapshot = getState\n        mapState, equalityFn);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(selectedState);\n        return selectedState;\n    };\n}\nvar useStoreState = createStoreStateHook(StoreContext);\nfunction createStoreActionsHook(Context) {\n    return function useStoreActions(mapActions) {\n        var store = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Context);\n        return mapActions(store.getActions());\n    };\n}\nvar useStoreActions = createStoreActionsHook(StoreContext);\nfunction createStoreDispatchHook(Context) {\n    return function useStoreDispatch() {\n        var store = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Context);\n        return store.dispatch;\n    };\n}\nvar useStoreDispatch = createStoreDispatchHook(StoreContext);\nfunction useStore() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StoreContext);\n}\nfunction createStoreRehydratedHook(Context) {\n    return function useStoreRehydrated() {\n        var store = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Context);\n        var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), rehydrated = _useState[0], setRehydrated = _useState[1];\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            store.persist.resolveRehydration().then(function() {\n                return setRehydrated(true);\n            });\n        }, []);\n        return rehydrated;\n    };\n}\nvar useStoreRehydrated = createStoreRehydratedHook(StoreContext);\nfunction createTypedHooks() {\n    return {\n        useStoreActions: useStoreActions,\n        useStoreDispatch: useStoreDispatch,\n        useStoreState: useStoreState,\n        useStoreRehydrated: useStoreRehydrated,\n        useStore: useStore\n    };\n}\nvar actionSymbol = \"$_a\";\nvar actionOnSymbol = \"$_aO\";\nvar computedSymbol = \"$_c\";\nvar effectOnSymbol = \"$_e\";\nvar persistSymbol = \"$_p\";\nvar reducerSymbol = \"$_r\";\nvar thunkOnSymbol = \"$_tO\";\nvar thunkSymbol = \"$_t\";\nvar debug = function debug(state) {\n    if ((0,immer__WEBPACK_IMPORTED_MODULE_4__.isDraft)(state)) {\n        return (0,immer__WEBPACK_IMPORTED_MODULE_4__.current)(state);\n    }\n    return state;\n};\nvar actionOn = function actionOn(targetResolver, fn, config) {\n    var _ref;\n    return _ref = {}, _ref[actionOnSymbol] = true, _ref.fn = fn, _ref.targetResolver = targetResolver, _ref.config = config, _ref;\n};\nvar action = function action(fn, config) {\n    var _ref2;\n    return _ref2 = {}, _ref2[actionSymbol] = true, _ref2.fn = fn, _ref2.config = config, _ref2;\n};\nvar defaultStateResolvers = [\n    function(state) {\n        return state;\n    }\n];\nvar computed = function computed(fnOrStateResolvers, fn) {\n    var _ref4;\n    if (typeof fn === \"function\") {\n        var _ref3;\n        return _ref3 = {}, _ref3[computedSymbol] = true, _ref3.fn = fn, _ref3.stateResolvers = fnOrStateResolvers, _ref3;\n    }\n    return _ref4 = {}, _ref4[computedSymbol] = true, _ref4.fn = fnOrStateResolvers, _ref4.stateResolvers = defaultStateResolvers, _ref4;\n};\nfunction effectOn(dependencyResolvers, fn) {\n    var _ref5;\n    return _ref5 = {}, _ref5[effectOnSymbol] = true, _ref5.dependencyResolvers = dependencyResolvers, _ref5.fn = fn, _ref5;\n}\nfunction generic(value) {\n    return value;\n}\nvar persist = function persist(model, config) {\n    var _objectSpread2;\n    return(// if we are not running in a browser context this becomes a no-op\n     true ? model : 0);\n};\nvar thunkOn = function thunkOn(targetResolver, fn) {\n    var _ref6;\n    return _ref6 = {}, _ref6[thunkOnSymbol] = true, _ref6.fn = fn, _ref6.targetResolver = targetResolver, _ref6;\n};\nvar thunk = function thunk(fn) {\n    var _ref7;\n    return _ref7 = {}, _ref7[thunkSymbol] = true, _ref7.fn = fn, _ref7;\n};\nvar reducer = function reducer(fn, config) {\n    var _ref8;\n    return _ref8 = {}, _ref8[reducerSymbol] = true, _ref8.fn = fn, _ref8.config = config, _ref8;\n};\n/**\r\n * We create our own immer instance to avoid potential issues with autoFreeze\r\n * becoming default enabled everywhere. We want to disable autofreeze as it\r\n * does not suit the design of Easy Peasy.\r\n * https://github.com/immerjs/immer/issues/681#issuecomment-705581111\r\n */ var easyPeasyImmer;\nfunction isPlainObject(obj) {\n    if (typeof obj !== \"object\" || obj === null) return false;\n    var proto = obj;\n    while(Object.getPrototypeOf(proto) !== null){\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n}\nfunction clone(source) {\n    function recursiveClone(current) {\n        var next = Object.keys(current).reduce(function(acc, key) {\n            if (Object.getOwnPropertyDescriptor(current, key).get == null) {\n                acc[key] = current[key];\n            }\n            return acc;\n        }, {});\n        Object.keys(next).forEach(function(key) {\n            if (isPlainObject(next[key])) {\n                next[key] = recursiveClone(next[key]);\n            }\n        });\n        return next;\n    }\n    return recursiveClone(source);\n}\nfunction isPromise(x) {\n    return x != null && typeof x === \"object\" && typeof x.then === \"function\";\n}\nfunction get(path, target) {\n    return path.reduce(function(acc, cur) {\n        return isPlainObject(acc) ? acc[cur] : undefined;\n    }, target);\n}\nfunction newify(currentPath, currentState, finalValue) {\n    if (currentPath.length === 0) {\n        return finalValue;\n    }\n    var newState = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, currentState);\n    var key = currentPath[0];\n    if (currentPath.length === 1) {\n        newState[key] = finalValue;\n    } else {\n        newState[key] = newify(currentPath.slice(1), newState[key], finalValue);\n    }\n    return newState;\n}\nfunction set(path, target, value) {\n    if (path.length === 0) {\n        if (typeof value === \"object\") {\n            Object.keys(target).forEach(function(key) {\n                delete target[key];\n            });\n            Object.keys(value).forEach(function(key) {\n                target[key] = value[key];\n            });\n        }\n        return;\n    }\n    path.reduce(function(acc, cur, idx) {\n        if (idx + 1 === path.length) {\n            acc[cur] = value;\n        } else {\n            acc[cur] = acc[cur] || {};\n        }\n        return acc[cur];\n    }, target);\n}\nfunction createSimpleProduce(disableImmer) {\n    if (disableImmer === void 0) {\n        disableImmer = false;\n    }\n    return function simpleProduce(path, state, fn, config) {\n        if (config && \"immer\" in config ? (config == null ? void 0 : config.immer) === false : disableImmer) {\n            var _current = get(path, state);\n            var next = fn(_current);\n            if (_current !== next) {\n                return newify(path, state, next);\n            }\n            return state;\n        }\n        if (!easyPeasyImmer) {\n            easyPeasyImmer = new immer__WEBPACK_IMPORTED_MODULE_4__.Immer({\n                // We need to ensure that we disable proxies if they aren't available\n                // on the environment. Users need to ensure that they use the enableES5\n                // feature of immer.\n                useProxies: typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\",\n                // Autofreezing breaks easy-peasy, we need a mixed version of immutability\n                // and mutability in order to apply updates to our computed properties\n                autoFreeze: false\n            });\n        }\n        if (path.length === 0) {\n            var _draft = easyPeasyImmer.createDraft(state);\n            var _result = fn(_draft);\n            if (_result) {\n                return (0,immer__WEBPACK_IMPORTED_MODULE_4__.isDraft)(_result) ? easyPeasyImmer.finishDraft(_result) : _result;\n            }\n            return easyPeasyImmer.finishDraft(_draft);\n        }\n        var parentPath = path.slice(0, path.length - 1);\n        var draft = easyPeasyImmer.createDraft(state);\n        var parent = get(parentPath, state);\n        var current = get(path, draft);\n        var result = fn(current);\n        if (result) {\n            parent[path[path.length - 1]] = result;\n        }\n        return easyPeasyImmer.finishDraft(draft);\n    };\n}\nvar pReduce = function pReduce(iterable, reducer, initialValue) {\n    return new Promise(function(resolve, reject) {\n        var iterator = iterable[Symbol.iterator]();\n        var index = 0;\n        var next = function next(total) {\n            var element = iterator.next();\n            if (element.done) {\n                resolve(total);\n                return;\n            }\n            Promise.all([\n                total,\n                element.value\n            ]).then(function(value) {\n                return(// eslint-disable-next-line no-plusplus\n                next(reducer(value[0], value[1], index++)));\n            }).catch(function(err) {\n                return reject(err);\n            });\n        };\n        next(initialValue);\n    });\n};\nvar pSeries = function pSeries(tasks) {\n    var results = [];\n    return pReduce(tasks, function(_, task) {\n        return task().then(function(value) {\n            results.push(value);\n        });\n    }).then(function() {\n        return results;\n    });\n};\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for(var i = 0; i < newInputs.length; i += 1){\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction useMemoOne(// getResult changes on every call,\ngetResult, // the inputs array changes on every call\ninputs) {\n    // using useState to generate initial value as it is lazy\n    var initial = react__WEBPACK_IMPORTED_MODULE_1___default().useState(function() {\n        return {\n            inputs: inputs,\n            result: getResult()\n        };\n    })[0];\n    var committed = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(initial);\n    // persist any uncommitted changes after they have been committed\n    var isInputMatch = Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));\n    // create a new cache if required\n    var cache = isInputMatch ? committed.current : {\n        inputs: inputs,\n        result: getResult()\n    };\n    // commit the cache\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(function() {\n        committed.current = cache;\n    }, [\n        cache\n    ]);\n    return cache.result;\n}\nfunction createReducer(disableImmer, _aRD, _cR, _cP) {\n    var simpleProduce = createSimpleProduce(disableImmer);\n    var runActionReducerAtPath = function runActionReducerAtPath(state, action, actionReducer, path, config) {\n        return simpleProduce(path, state, function(draft) {\n            return actionReducer(draft, action.payload);\n        }, config);\n    };\n    var reducerForActions = function reducerForActions(state, action) {\n        var actionReducer = _aRD[action.type];\n        if (actionReducer) {\n            return runActionReducerAtPath(state, action, actionReducer, actionReducer.def.meta.parent, actionReducer.def.config);\n        }\n        return state;\n    };\n    var reducerForCustomReducers = function reducerForCustomReducers(state, action) {\n        return _cR.reduce(function(acc, _ref) {\n            var parentPath = _ref.parentPath, key = _ref.key, reducer = _ref.reducer, config = _ref.config;\n            return simpleProduce(parentPath, acc, function(draft) {\n                draft[key] = reducer((0,immer__WEBPACK_IMPORTED_MODULE_4__.isDraft)(draft[key]) ? (0,immer__WEBPACK_IMPORTED_MODULE_4__.original)(draft[key]) : draft[key], action);\n                return draft;\n            }, config);\n        }, state);\n    };\n    var rootReducer = function rootReducer(state, action) {\n        var stateAfterActions = reducerForActions(state, action);\n        var next = _cR.length > 0 ? reducerForCustomReducers(stateAfterActions, action) : stateAfterActions;\n        if (state !== next) {\n            _cP.forEach(function(_ref2) {\n                var parentPath = _ref2.parentPath, bindComputedProperty = _ref2.bindComputedProperty;\n                var parentState = get(parentPath, next);\n                if (parentState != null) bindComputedProperty(parentState, next);\n            });\n        }\n        return next;\n    };\n    return rootReducer;\n}\nvar migrate = function migrate(data, migrations) {\n    var _data$_migrationVersi;\n    (0,immer__WEBPACK_IMPORTED_MODULE_4__.setAutoFreeze)(false);\n    var version = (_data$_migrationVersi = data._migrationVersion) != null ? _data$_migrationVersi : 0;\n    var toVersion = migrations.migrationVersion;\n    if (typeof version !== \"number\" || typeof toVersion !== \"number\") {\n        throw new Error(\"No migration version found\");\n    }\n    while(version < toVersion){\n        var nextVersion = version + 1;\n        var migrator = migrations[nextVersion];\n        if (!migrator) {\n            throw new Error(\"No migrator found for `migrationVersion` \" + nextVersion);\n        }\n        data = (0,immer__WEBPACK_IMPORTED_MODULE_4__.produce)(data, migrator);\n        data._migrationVersion = nextVersion;\n        version = data._migrationVersion;\n    }\n    (0,immer__WEBPACK_IMPORTED_MODULE_4__.setAutoFreeze)(true);\n    return data;\n};\nvar noopStorage = {\n    getItem: function getItem() {\n        return undefined;\n    },\n    setItem: function setItem() {\n        return undefined;\n    },\n    removeItem: function removeItem() {\n        return undefined;\n    }\n};\nvar getBrowerStorage = function getBrowerStorage(storageName) {\n    var storageCache;\n    return function() {\n        if (!storageCache) {\n            try {\n                if (false) {}\n            } catch (_) {\n            // swallow the failure\n            }\n            if (!storageCache) {\n                storageCache = noopStorage;\n            }\n        }\n        return storageCache;\n    };\n};\nvar localStorage = getBrowerStorage(\"localStorage\");\nvar sessionStorage = getBrowerStorage(\"sessionStorage\");\nfunction createStorageWrapper(storage, transformers, migrations) {\n    if (transformers === void 0) {\n        transformers = [];\n    }\n    if (migrations === void 0) {\n        migrations = {};\n    }\n    if (storage == null) {\n        storage = sessionStorage();\n    }\n    if (typeof storage === \"string\") {\n        if (storage === \"localStorage\") {\n            storage = localStorage();\n        } else if (storage === \"sessionStorage\") {\n            storage = sessionStorage();\n        } else {\n            if (true) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Invalid storage provider\");\n            }\n            storage = noopStorage;\n        }\n    }\n    var outTransformers = [].concat(transformers).reverse();\n    var serialize = function serialize(data) {\n        if (transformers.length > 0 && data != null && typeof data === \"object\") {\n            Object.keys(data).forEach(function(key) {\n                data[key] = transformers.reduce(function(acc, cur) {\n                    return cur.in(acc, key, data);\n                }, data[key]);\n            });\n        }\n        return storage === localStorage() || storage === sessionStorage() ? JSON.stringify({\n            data: data\n        }) : data;\n    };\n    var deserialize = function deserialize(data) {\n        var storageData = storage === localStorage() || storage === sessionStorage() ? JSON.parse(data).data : data;\n        var hasMigrations = Object.keys(migrations).length > 0;\n        var result = hasMigrations ? migrate(storageData, migrations) : storageData;\n        if (outTransformers.length > 0 && result != null && typeof result === \"object\") {\n            Object.keys(result).forEach(function(key) {\n                result[key] = outTransformers.reduce(function(acc, cur) {\n                    return cur.out(acc, key, result);\n                }, result[key]);\n            });\n        }\n        return result;\n    };\n    var isAsync = isPromise(storage.getItem(\"_\"));\n    return {\n        getItem: function getItem(key) {\n            if (isAsync) {\n                return storage.getItem(key).then(function(wrapped) {\n                    return wrapped != null ? deserialize(wrapped) : undefined;\n                });\n            }\n            var wrapped = storage.getItem(key);\n            return wrapped != null ? deserialize(wrapped) : undefined;\n        },\n        setItem: function setItem(key, data) {\n            return storage.setItem(key, serialize(data));\n        },\n        removeItem: function removeItem(key) {\n            return storage.removeItem(key);\n        }\n    };\n}\nfunction extractPersistConfig(path, persistdef) {\n    if (persistdef === void 0) {\n        persistdef = {};\n    }\n    return {\n        path: path,\n        config: {\n            allow: persistdef.allow || [],\n            deny: persistdef.deny || [],\n            mergeStrategy: persistdef.mergeStrategy || \"mergeDeep\",\n            storage: createStorageWrapper(persistdef.storage, persistdef.transformers, persistdef.migrations)\n        }\n    };\n}\nfunction resolvePersistTargets(target, allow, deny) {\n    var targets = Object.keys(target);\n    if (allow.length > 0) {\n        targets = targets.reduce(function(acc, cur) {\n            if (allow.findIndex(function(x) {\n                return x === cur;\n            }) !== -1) {\n                return [].concat(acc, [\n                    cur\n                ]);\n            }\n            return acc;\n        }, []);\n    }\n    if (deny.length > 0) {\n        targets = targets.reduce(function(acc, cur) {\n            if (deny.findIndex(function(x) {\n                return x === cur;\n            }) !== -1) {\n                return acc;\n            }\n            return [].concat(acc, [\n                cur\n            ]);\n        }, []);\n    }\n    return targets;\n}\nfunction createPersistenceClearer(persistKey, _r) {\n    return function() {\n        if (_r._i._persistenceConfig.length === 0) {\n            return Promise.resolve();\n        }\n        return pSeries(_r._i._persistenceConfig.map(function(_ref) {\n            var path = _ref.path, config = _ref.config;\n            return function() {\n                return Promise.resolve(config.storage.removeItem(persistKey(path)));\n            };\n        }));\n    };\n}\nfunction createPersistor(persistKey, _r) {\n    var persistPromise = Promise.resolve();\n    var isPersisting = false;\n    var nextPersistOperation;\n    var timingMethod =  true ? function(fn) {\n        return fn();\n    } : 0;\n    var persist = function persist(nextState) {\n        if (_r._i._persistenceConfig.length === 0) {\n            return;\n        }\n        var operation = function operation() {\n            isPersisting = true;\n            persistPromise = new Promise(function(resolve) {\n                timingMethod(function() {\n                    pSeries(_r._i._persistenceConfig.map(function(_ref2) {\n                        var path = _ref2.path, config = _ref2.config;\n                        return function() {\n                            var storage = config.storage, allow = config.allow, deny = config.deny;\n                            var persistRootState = clone(get(path, nextState));\n                            var persistTargets = resolvePersistTargets(persistRootState, allow, deny);\n                            var stateToPersist = {};\n                            persistTargets.map(function(key) {\n                                var targetPath = [].concat(path, [\n                                    key\n                                ]);\n                                var rawValue = get(targetPath, nextState);\n                                var value = isPlainObject(rawValue) ? clone(rawValue) : rawValue;\n                                stateToPersist[key] = value;\n                            });\n                            return Promise.resolve(storage.setItem(persistKey(path), stateToPersist));\n                        };\n                    })).finally(function() {\n                        isPersisting = false;\n                        if (nextPersistOperation) {\n                            var next = nextPersistOperation;\n                            nextPersistOperation = null;\n                            next();\n                        } else {\n                            resolve();\n                        }\n                    });\n                });\n            });\n        };\n        if (isPersisting) {\n            nextPersistOperation = operation;\n        } else {\n            operation();\n        }\n    };\n    return {\n        persist: persist,\n        clear: createPersistenceClearer(persistKey, _r),\n        flush: function flush() {\n            if (nextPersistOperation) {\n                nextPersistOperation();\n            }\n            return persistPromise;\n        }\n    };\n}\nfunction createPersistMiddleware(persistor, _r) {\n    return function(_ref3) {\n        var getState = _ref3.getState;\n        return function(next) {\n            return function(action) {\n                var state = next(action);\n                if (action && action.type !== \"@action.ePRS\" && _r._i._persistenceConfig.length > 0) {\n                    persistor.persist(getState());\n                }\n                return state;\n            };\n        };\n    };\n}\nfunction rehydrateStateFromPersistIfNeeded(persistKey, replaceState, _r, root) {\n    if (_r._i._persistenceConfig.length === 0) {\n        return Promise.resolve();\n    }\n    var state = clone(_r._i._dS);\n    var rehydrating = false;\n    return pSeries(_r._i._persistenceConfig.map(function(persistInstance) {\n        return function() {\n            var path = persistInstance.path, config = persistInstance.config;\n            var mergeStrategy = config.mergeStrategy, storage = config.storage;\n            if (root && (path.length < 1 || path[0] !== root)) {\n                return Promise.resolve();\n            }\n            var hasDataModelChanged = function hasDataModelChanged(dataModel, rehydratingModelData) {\n                return dataModel != null && rehydratingModelData != null && (typeof dataModel !== typeof rehydratingModelData || Array.isArray(dataModel) && !Array.isArray(rehydratingModelData));\n            };\n            var applyRehydrationStrategy = function applyRehydrationStrategy(persistedState) {\n                if (mergeStrategy === \"overwrite\") {\n                    set(path, state, persistedState);\n                } else if (mergeStrategy === \"mergeShallow\") {\n                    var targetState = get(path, state);\n                    Object.keys(persistedState).forEach(function(key) {\n                        if (hasDataModelChanged(targetState[key], persistedState[key])) ;\n                        else {\n                            targetState[key] = persistedState[key];\n                        }\n                    });\n                } else if (mergeStrategy === \"mergeDeep\") {\n                    var _targetState = get(path, state);\n                    var setAt = function setAt(currentTargetState, currentPersistedState) {\n                        Object.keys(currentPersistedState).forEach(function(key) {\n                            if (hasDataModelChanged(currentTargetState[key], currentPersistedState[key])) ;\n                            else if (isPlainObject(currentPersistedState[key])) {\n                                currentTargetState[key] = currentTargetState[key] || {};\n                                setAt(currentTargetState[key], currentPersistedState[key]);\n                            } else {\n                                currentTargetState[key] = currentPersistedState[key];\n                            }\n                        });\n                    };\n                    setAt(_targetState, persistedState);\n                }\n            };\n            var rehydate = function rehydate(persistedState) {\n                if (persistedState != null) {\n                    applyRehydrationStrategy(persistedState);\n                    rehydrating = true;\n                }\n            };\n            var getItemResult = storage.getItem(persistKey(path));\n            if (isPromise(getItemResult)) {\n                return getItemResult.then(rehydate);\n            }\n            return Promise.resolve(rehydate(getItemResult));\n        };\n    })).then(function() {\n        if (rehydrating) {\n            replaceState(state);\n        }\n    });\n}\nfunction createActionCreator(def, _r) {\n    function actionCreator(payload) {\n        var action = {\n            type: def.meta.type,\n            payload: payload,\n            config: def.config\n        };\n        if (def[actionOnSymbol] && def.meta.resolvedTargets) {\n            payload.resolvedTargets = [].concat(def.meta.resolvedTargets);\n        }\n        return _r.dispatch(action);\n    }\n    // We bind the types to the creator for easy reference by consumers\n    actionCreator.type = def.meta.type;\n    return actionCreator;\n}\nfunction createThunkHandler(def, _r, injections, _aC) {\n    return function(payload, fail) {\n        var helpers = {\n            dispatch: _r.dispatch,\n            fail: fail,\n            getState: function getState() {\n                return get(def.meta.parent, _r.getState());\n            },\n            getStoreActions: function getStoreActions() {\n                return _aC;\n            },\n            getStoreState: _r.getState,\n            injections: injections,\n            meta: {\n                key: def.meta.actionName,\n                parent: def.meta.parent,\n                path: def.meta.path\n            }\n        };\n        if (def[thunkOnSymbol] && def.meta.resolvedTargets) {\n            payload.resolvedTargets = [].concat(def.meta.resolvedTargets);\n        }\n        return def.fn(get(def.meta.parent, _aC), payload, helpers);\n    };\n}\nvar logThunkEventListenerError = function logThunkEventListenerError(type, err) {\n    // eslint-disable-next-line no-console\n    console.log(\"Error in \" + type);\n    // eslint-disable-next-line no-console\n    console.log(err);\n};\nvar handleEventDispatchErrors$1 = function handleEventDispatchErrors(type, dispatcher) {\n    return function() {\n        try {\n            var result = dispatcher.apply(void 0, arguments);\n            if (isPromise(result)) {\n                result.catch(function(err) {\n                    logThunkEventListenerError(type, err);\n                });\n            }\n        } catch (err) {\n            logThunkEventListenerError(type, err);\n        }\n    };\n};\nfunction createThunkActionsCreator(def, _r) {\n    var actionCreator = function actionCreator(payload) {\n        var dispatchStart = handleEventDispatchErrors$1(def.meta.startType, function() {\n            return _r.dispatch({\n                type: def.meta.startType,\n                payload: payload\n            });\n        });\n        var dispatchFail = handleEventDispatchErrors$1(def.meta.failType, function(err) {\n            return _r.dispatch({\n                type: def.meta.failType,\n                payload: payload,\n                error: err\n            });\n        });\n        var dispatchSuccess = handleEventDispatchErrors$1(def.meta.successType, function(result) {\n            return _r.dispatch({\n                type: def.meta.successType,\n                payload: payload,\n                result: result\n            });\n        });\n        dispatchStart();\n        var failure = null;\n        var fail = function fail(_failure) {\n            failure = _failure || new Error();\n        };\n        var result = _r.dispatch(function() {\n            return def.thunkHandler(payload, fail);\n        });\n        if (isPromise(result)) {\n            return result.then(function(resolved) {\n                if (failure) {\n                    dispatchFail(failure);\n                } else {\n                    dispatchSuccess(resolved);\n                }\n                return resolved;\n            });\n        }\n        if (failure) {\n            dispatchFail(failure);\n        } else {\n            dispatchSuccess(result);\n        }\n        return result;\n    };\n    actionCreator.type = def.meta.type;\n    actionCreator.successType = def.meta.successType;\n    actionCreator.failType = def.meta.failType;\n    actionCreator.startType = def.meta.startType;\n    return actionCreator;\n}\nfunction createListenerMiddleware(_r) {\n    return function() {\n        return function(next) {\n            return function(action) {\n                var result = next(action);\n                if (action && _r._i._lAM[action.type] && _r._i._lAM[action.type].length > 0) {\n                    var sourceAction = _r._i._aCD[action.type];\n                    _r._i._lAM[action.type].forEach(function(actionCreator) {\n                        actionCreator({\n                            type: sourceAction ? sourceAction.def.meta.type : action.type,\n                            payload: action.payload,\n                            error: action.error,\n                            result: action.result\n                        });\n                    });\n                }\n                return result;\n            };\n        };\n    };\n}\nfunction bindListenerdefs(listenerdefs, _aC, _aCD, _lAM) {\n    listenerdefs.forEach(function(def) {\n        var targets = def.targetResolver(get(def.meta.parent, _aC), _aC);\n        var targetTypes = (Array.isArray(targets) ? targets : [\n            targets\n        ]).reduce(function(acc, target) {\n            if (typeof target === \"function\" && target.def.meta.type && _aCD[target.def.meta.type]) {\n                if (target.def.meta.successType) {\n                    acc.push(target.def.meta.successType);\n                } else {\n                    acc.push(target.def.meta.type);\n                }\n            } else if (typeof target === \"string\") {\n                acc.push(target);\n            }\n            return acc;\n        }, []);\n        def.meta.resolvedTargets = targetTypes;\n        targetTypes.forEach(function(targetType) {\n            var listenerReg = _lAM[targetType] || [];\n            listenerReg.push(_aCD[def.meta.type]);\n            _lAM[targetType] = listenerReg;\n        });\n    });\n}\nfunction createComputedPropertyBinder(key, def, _r) {\n    var hasRunOnce = false;\n    var prevInputs = [];\n    var prevValue;\n    var prevStoreState;\n    var performingEqualityCheck = false;\n    var areEqual = function areEqual(a, b) {\n        performingEqualityCheck = true;\n        var result = fast_deep_equal_es6__WEBPACK_IMPORTED_MODULE_3___default()(a, b);\n        performingEqualityCheck = false;\n        return result;\n    };\n    return function createComputedProperty(parentState, storeState) {\n        Object.defineProperty(parentState, key, {\n            configurable: true,\n            enumerable: true,\n            get: function get() {\n                if (performingEqualityCheck) {\n                    return prevValue;\n                }\n                var inputs = def.stateResolvers.map(function(resolver) {\n                    return resolver(parentState, storeState);\n                });\n                if (hasRunOnce && (storeState === prevStoreState && areInputsEqual(inputs, prevInputs) || // We don't want computed properties resolved every time an action\n                // is handled by the reducer. They need to remain lazy, only being\n                // computed when used by a component or getState call;\n                _r._i._cS.isInReducer && // This is to account for strange errors that may occur via immer;\n                new Error().stack.match(/shallowCopy/gi) !== null)) {\n                    return prevValue;\n                }\n                var newValue = def.fn.apply(def, inputs);\n                if (!areEqual(newValue, prevValue)) {\n                    prevValue = newValue;\n                }\n                prevInputs = inputs;\n                prevStoreState = storeState;\n                hasRunOnce = true;\n                return prevValue;\n            }\n        });\n    };\n}\nfunction createComputedPropertiesMiddleware(_r) {\n    return function() {\n        return function(next) {\n            return function(action) {\n                _r._i._cS.isInReducer = true;\n                var result = next(action);\n                _r._i._cS.isInReducer = false;\n                return result;\n            };\n        };\n    };\n}\nfunction createEffectsMiddleware(_r) {\n    return function(store) {\n        return function(next) {\n            return function(action) {\n                if (_r._i._e.length === 0) {\n                    return next(action);\n                }\n                var prevState = store.getState();\n                var result = next(action);\n                var nextState = store.getState();\n                if (prevState !== nextState) {\n                    _r._i._e.forEach(function(def) {\n                        var prevLocal = get(def.meta.parent, prevState);\n                        var nextLocal = get(def.meta.parent, nextState);\n                        var prevDependencies = def.dependencyResolvers.map(function(resolver) {\n                            return resolver(prevLocal, prevState);\n                        });\n                        var nextDependencies = def.dependencyResolvers.map(function(resolver) {\n                            return resolver(nextLocal, nextState);\n                        });\n                        var hasChanged = prevDependencies.some(function(dependency, idx) {\n                            return dependency !== nextDependencies[idx];\n                        });\n                        if (hasChanged) {\n                            def.actionCreator(prevDependencies, nextDependencies, action);\n                        }\n                    });\n                }\n                return result;\n            };\n        };\n    };\n}\nvar logEffectError = function logEffectError(err) {\n    // As users can't get a handle on effects we need to report the error\n    // eslint-disable-next-line no-console\n    console.error(err);\n};\nfunction createEffectHandler(def, _r, injections, _aC) {\n    var dispose;\n    return function(change) {\n        var helpers = {\n            dispatch: _r.dispatch,\n            getState: function getState() {\n                return get(def.meta.parent, _r.getState());\n            },\n            getStoreActions: function getStoreActions() {\n                return _aC;\n            },\n            getStoreState: _r.getState,\n            injections: injections,\n            meta: {\n                key: def.meta.actionName,\n                parent: def.meta.parent,\n                path: def.meta.path\n            }\n        };\n        if (dispose !== undefined) {\n            var disposeResult = dispose();\n            dispose = undefined;\n            if (isPromise(disposeResult)) {\n                disposeResult.catch(logEffectError);\n            }\n        }\n        var actions = get(def.meta.parent, _aC);\n        var effectResult = def.fn(actions, change, helpers);\n        if (isPromise(effectResult)) {\n            return effectResult.then(function(resolved) {\n                if (typeof resolved === \"function\") {\n                    if (true) {\n                        // Dispose functions are not allowed to be resolved asynchronously.\n                        // Doing so would provide inconsistent behaviour around their execution.\n                        // eslint-disable-next-line no-console\n                        console.warn(\"[easy-peasy] Effect is asynchronously resolving a dispose fn.\");\n                    }\n                }\n            });\n        }\n        if (typeof effectResult === \"function\") {\n            dispose = effectResult;\n        }\n        return undefined;\n    };\n}\nvar logEffectEventListenerError = function logEffectEventListenerError(type, err) {\n    // eslint-disable-next-line no-console\n    console.log(\"Error in \" + type);\n    // eslint-disable-next-line no-console\n    console.log(err);\n};\nvar handleEventDispatchErrors = function handleEventDispatchErrors(type, dispatcher) {\n    return function() {\n        try {\n            var result = dispatcher.apply(void 0, arguments);\n            if (isPromise(result)) {\n                result.catch(function(err) {\n                    logEffectEventListenerError(type, err);\n                });\n            }\n        } catch (err) {\n            logEffectEventListenerError(type, err);\n        }\n    };\n};\nfunction createEffectActionsCreator(def, _r, effectHandler) {\n    var actionCreator = function actionCreator(previousDependencies, nextDependencies, action) {\n        var change = {\n            prev: previousDependencies,\n            current: nextDependencies,\n            action: action\n        };\n        var dispatchStart = handleEventDispatchErrors(def.meta.startType, function() {\n            return _r.dispatch({\n                type: def.meta.startType,\n                change: change\n            });\n        });\n        var dispatchSuccess = handleEventDispatchErrors(def.meta.successType, function() {\n            return _r.dispatch({\n                type: def.meta.successType,\n                change: change\n            });\n        });\n        dispatchStart();\n        try {\n            var result = _r.dispatch(function() {\n                return effectHandler(change);\n            });\n            if (isPromise(result)) {\n                return result.then(function(resolved) {\n                    dispatchSuccess(resolved);\n                    return resolved;\n                }, logEffectError);\n            }\n            dispatchSuccess(result);\n            return result;\n        } catch (err) {\n            logEffectError(err);\n        }\n        return undefined;\n    };\n    actionCreator.type = def.meta.type;\n    actionCreator.startType = def.meta.startType;\n    actionCreator.successType = def.meta.successType;\n    actionCreator.failType = def.meta.failType;\n    return actionCreator;\n}\nfunction extractDataFromModel(model, initialState, injections, _r) {\n    var _dS = initialState;\n    var _aCD = {};\n    var _aC = {};\n    var _aRD = {};\n    var actionThunks = {};\n    var _cP = [];\n    var _cR = [];\n    var _e = [];\n    var _lAC = {};\n    var _lAM = {};\n    var listenerdefs = [];\n    var _persistenceConfig = [];\n    var _cS = {\n        isInReducer: false\n    };\n    var recursiveExtractFromModel = function recursiveExtractFromModel(current, parentPath) {\n        return Object.keys(current).forEach(function(key) {\n            var value = current[key];\n            var path = [].concat(parentPath, [\n                key\n            ]);\n            var meta = {\n                parent: parentPath,\n                path: path,\n                key: key\n            };\n            var handleValueAsState = function handleValueAsState() {\n                var initialParentRef = get(parentPath, initialState);\n                if (initialParentRef && key in initialParentRef) {\n                    set(path, _dS, initialParentRef[key]);\n                } else {\n                    set(path, _dS, value);\n                }\n            };\n            if (key === persistSymbol) {\n                _persistenceConfig.push(extractPersistConfig(parentPath, value));\n                return;\n            }\n            if (value != null && typeof value === \"object\") {\n                if (value[actionSymbol] || value[actionOnSymbol]) {\n                    var def = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, value);\n                    // Determine the category of the action\n                    var category = def[actionSymbol] ? \"@action\" : \"@actionOn\";\n                    // Establish the meta data describing the action\n                    def.meta = {\n                        actionName: meta.key,\n                        category: category,\n                        type: category + \".\" + meta.path.join(\".\"),\n                        parent: meta.parent,\n                        path: meta.path\n                    };\n                    // Create the \"action creator\" function\n                    def.actionCreator = createActionCreator(def, _r);\n                    // Create a bidirectional relationship of the def/actionCreator\n                    def.actionCreator.def = def;\n                    // Create a bidirectional relationship of the def/reducer\n                    def.fn.def = def;\n                    // Add the action creator to lookup map\n                    _aCD[def.meta.type] = def.actionCreator;\n                    // Add the reducer to lookup map\n                    _aRD[def.meta.type] = def.fn;\n                    // We don't want to expose the internal action to consumers\n                    if (meta.key !== \"ePRS\") {\n                        // Set the action creator in the \"actions\" object tree for\n                        // either the listeners object tree, or the standard actions/thunks\n                        // object tree\n                        if (def[actionOnSymbol]) {\n                            listenerdefs.push(def);\n                            set(path, _lAC, def.actionCreator);\n                        } else {\n                            set(path, _aC, def.actionCreator);\n                        }\n                    }\n                } else if (value[thunkSymbol] || value[thunkOnSymbol]) {\n                    var _def = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, value);\n                    // Determine the category of the thunk\n                    var _category = _def[thunkSymbol] ? \"@thunk\" : \"@thunkOn\";\n                    // Establish the meta data describing the thunk\n                    var type = _category + \".\" + meta.path.join(\".\");\n                    _def.meta = {\n                        actionName: meta.key,\n                        parent: meta.parent,\n                        path: meta.path,\n                        type: type,\n                        startType: type + \"(start)\",\n                        successType: type + \"(success)\",\n                        failType: type + \"(fail)\"\n                    };\n                    // Create the function that will handle, i.e. be executed, when\n                    // the thunk action is created/dispatched\n                    _def.thunkHandler = createThunkHandler(_def, _r, injections, _aC);\n                    // Register the thunk handler\n                    set(path, actionThunks, _def.thunkHandler);\n                    // Create the \"action creator\" function\n                    _def.actionCreator = createThunkActionsCreator(_def, _r);\n                    // Create a bidirectional relationship of the def/actionCreator\n                    _def.actionCreator.def = _def;\n                    // Register the action creator within the lookup map\n                    _aCD[_def.meta.type] = _def.actionCreator;\n                    // Set the action creator in the \"actions\" object tree for\n                    // either the listeners object tree, or the standard actions/thunks\n                    // object tree\n                    if (_def[thunkOnSymbol]) {\n                        listenerdefs.push(_def);\n                        set(path, _lAC, _def.actionCreator);\n                    } else {\n                        set(path, _aC, _def.actionCreator);\n                    }\n                } else if (value[computedSymbol]) {\n                    var parent = get(parentPath, _dS);\n                    var bindComputedProperty = createComputedPropertyBinder(key, value, _r);\n                    bindComputedProperty(parent, _dS);\n                    _cP.push({\n                        key: key,\n                        parentPath: parentPath,\n                        bindComputedProperty: bindComputedProperty\n                    });\n                } else if (value[reducerSymbol]) {\n                    _cR.push({\n                        key: key,\n                        parentPath: parentPath,\n                        reducer: value.fn,\n                        config: value.config\n                    });\n                } else if (value[effectOnSymbol]) {\n                    var _def2 = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, value);\n                    // Establish the meta data describing the effect\n                    var _type = \"@effectOn.\" + meta.path.join(\".\");\n                    _def2.meta = {\n                        type: _type,\n                        actionName: meta.key,\n                        parent: meta.parent,\n                        path: meta.path,\n                        startType: _type + \"(start)\",\n                        successType: _type + \"(success)\",\n                        failType: _type + \"(fail)\"\n                    };\n                    var effectHandler = createEffectHandler(_def2, _r, injections, _aC);\n                    var actionCreator = createEffectActionsCreator(_def2, _r, effectHandler);\n                    _def2.actionCreator = actionCreator;\n                    _e.push(_def2);\n                } else if (isPlainObject(value)) {\n                    var existing = get(path, _dS);\n                    if (existing == null) {\n                        set(path, _dS, {});\n                    }\n                    recursiveExtractFromModel(value, path);\n                } else {\n                    handleValueAsState();\n                }\n            } else {\n                handleValueAsState();\n            }\n        });\n    };\n    _persistenceConfig = _persistenceConfig.sort(function(a, b) {\n        var aPath = a.path.join(\".\");\n        var bPath = b.path.join(\".\");\n        if (aPath < bPath) {\n            return -1;\n        }\n        if (aPath > bPath) {\n            return 1;\n        }\n        return 0;\n    });\n    recursiveExtractFromModel(model, []);\n    bindListenerdefs(listenerdefs, _aC, _aCD, _lAM);\n    return {\n        _aCD: _aCD,\n        _aC: _aC,\n        _aRD: _aRD,\n        _cP: _cP,\n        _cR: _cR,\n        _cS: _cS,\n        _dS: _dS,\n        _e: _e,\n        _lAC: _lAC,\n        _lAM: _lAM,\n        _persistenceConfig: _persistenceConfig\n    };\n}\nfunction createStore(model, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var modelClone = clone(model);\n    var _options = options, compose$1 = _options.compose, _options$devTools = _options.devTools, devTools = _options$devTools === void 0 ? \"development\" !== \"production\" : _options$devTools, _options$disableImmer = _options.disableImmer, disableImmer = _options$disableImmer === void 0 ? false : _options$disableImmer, _options$enhancers = _options.enhancers, enhancers = _options$enhancers === void 0 ? [] : _options$enhancers, _options$initialState = _options.initialState, initialState = _options$initialState === void 0 ? undefined : _options$initialState, _options$injections = _options.injections, injections = _options$injections === void 0 ? {} : _options$injections, _options$middleware = _options.middleware, middleware = _options$middleware === void 0 ? [] : _options$middleware, _options$mockActions = _options.mockActions, mockActions = _options$mockActions === void 0 ? false : _options$mockActions, _options$name = _options.name, storeName = _options$name === void 0 ? \"EasyPeasyStore\" : _options$name, _options$version = _options.version, version = _options$version === void 0 ? 0 : _options$version, _options$reducerEnhan = _options.reducerEnhancer, reducerEnhancer = _options$reducerEnhan === void 0 ? function(rootReducer) {\n        return rootReducer;\n    } : _options$reducerEnhan;\n    var bindReplaceState = function bindReplaceState(modelDef) {\n        return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, modelDef), {}, {\n            ePRS: action(function(_, payload) {\n                return payload;\n            })\n        });\n    };\n    var _r = {};\n    var modeldef = bindReplaceState(modelClone);\n    var mockedActions = [];\n    var persistKey = function persistKey(targetPath) {\n        return \"[\" + storeName + \"][\" + version + \"]\" + (targetPath.length > 0 ? \"[\" + targetPath.join(\".\") + \"]\" : \"\");\n    };\n    var persistor = createPersistor(persistKey, _r);\n    var persistMiddleware = createPersistMiddleware(persistor, _r);\n    var replaceState = function replaceState(nextState) {\n        return _r._i._aCD[\"@action.ePRS\"](nextState);\n    };\n    var bindStoreInternals = function bindStoreInternals(state) {\n        if (state === void 0) {\n            state = {};\n        }\n        var data = extractDataFromModel(modeldef, state, injections, _r);\n        _r._i = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, data), {}, {\n            reducer: reducerEnhancer(createReducer(disableImmer, data._aRD, data._cR, data._cP))\n        });\n    };\n    var mockActionsMiddleware = function mockActionsMiddleware() {\n        return function() {\n            return function(action) {\n                if (action != null) {\n                    mockedActions.push(action);\n                }\n                return undefined;\n            };\n        };\n    };\n    var devToolConfig = devTools === true ? {} : devTools;\n    var composeEnhancers = compose$1 || (devTools && \"undefined\" !== \"undefined\" && 0 ? 0 : redux__WEBPACK_IMPORTED_MODULE_5__.compose);\n    bindStoreInternals(initialState || {});\n    var easyPeasyMiddleware = [\n        createComputedPropertiesMiddleware(_r)\n    ].concat(middleware, [\n        redux_thunk__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n        createListenerMiddleware(_r),\n        createEffectsMiddleware(_r),\n        persistMiddleware\n    ]);\n    if (mockActions) {\n        easyPeasyMiddleware.push(mockActionsMiddleware);\n    }\n    var store = (0,redux__WEBPACK_IMPORTED_MODULE_5__.createStore)(_r._i.reducer, _r._i._dS, composeEnhancers.apply(void 0, [\n        redux__WEBPACK_IMPORTED_MODULE_5__.applyMiddleware.apply(void 0, easyPeasyMiddleware)\n    ].concat(enhancers)));\n    store.subscribe(function() {\n        _r._i._cS.isInReducer = false;\n    });\n    _r.dispatch = store.dispatch;\n    _r.getState = store.getState;\n    var bindActionCreators = function bindActionCreators() {\n        Object.keys(store.dispatch).forEach(function(actionsKey) {\n            delete store.dispatch[actionsKey];\n        });\n        Object.keys(_r._i._aC).forEach(function(key) {\n            store.dispatch[key] = _r._i._aC[key];\n        });\n    };\n    bindActionCreators();\n    var rebindStore = function rebindStore(removeKey) {\n        var currentState = store.getState();\n        if (removeKey) {\n            delete currentState[removeKey];\n        }\n        bindStoreInternals(currentState);\n        store.replaceReducer(_r._i.reducer);\n        replaceState(_r._i._dS);\n        bindActionCreators();\n    };\n    var _resolveRehydration = rehydrateStateFromPersistIfNeeded(persistKey, replaceState, _r);\n    return Object.assign(store, {\n        addModel: function addModel(key, modelForKey) {\n            if (modeldef[key] && \"development\" !== \"production\") {\n                store.removeModel(key);\n            }\n            modeldef[key] = modelForKey;\n            rebindStore();\n            // There may have been persisted state for a dynamic model. We should try\n            // and rehydrate the specifc node\n            var addModelRehydration = rehydrateStateFromPersistIfNeeded(persistKey, replaceState, _r, key);\n            return {\n                resolveRehydration: function resolveRehydration() {\n                    return addModelRehydration;\n                }\n            };\n        },\n        clearMockedActions: function clearMockedActions() {\n            mockedActions = [];\n        },\n        getActions: function getActions() {\n            return _r._i._aC;\n        },\n        getListeners: function getListeners() {\n            return _r._i._lAC;\n        },\n        getMockedActions: function getMockedActions() {\n            return [].concat(mockedActions);\n        },\n        persist: {\n            clear: persistor.clear,\n            flush: persistor.flush,\n            resolveRehydration: function resolveRehydration() {\n                return _resolveRehydration;\n            }\n        },\n        reconfigure: function reconfigure(newModel) {\n            modeldef = bindReplaceState(newModel);\n            rebindStore();\n        },\n        removeModel: function removeModel(key) {\n            if (!modeldef[key]) {\n                return;\n            }\n            delete modeldef[key];\n            rebindStore(key);\n        }\n    });\n}\nfunction createContextStore(model, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    // We create a mutable injections reference to allow updating it\n    var _config = config, _config$injections = _config.injections, mutableInjections = _config$injections === void 0 ? {} : _config$injections;\n    var StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n    function Provider(_ref) {\n        var children = _ref.children, runtimeModel = _ref.runtimeModel, injections = _ref.injections;\n        // If the user provided injections we need to ensure our mutable ref\n        // is up to date. We could consider doing a shallow compare here?\n        if (injections != null) {\n            var nextInjections = typeof injections === \"function\" ? injections(mutableInjections) : injections;\n            var nextKeys = Object.keys(nextInjections);\n            var removeKeys = Object.keys(mutableInjections).filter(function(k) {\n                return !nextKeys.includes(k);\n            });\n            removeKeys.forEach(function(k) {\n                delete mutableInjections[k];\n            });\n            Object.assign(mutableInjections, nextInjections);\n        }\n        var store = useMemoOne(function() {\n            return createStore(typeof model === \"function\" ? model(runtimeModel) : model, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, config), {}, {\n                originalInjections: mutableInjections\n            }));\n        }, []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StoreContext.Provider, {\n            value: store\n        }, children);\n    }\n    function useStore() {\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StoreContext);\n    }\n    return {\n        Provider: Provider,\n        useStore: useStore,\n        useStoreState: createStoreStateHook(StoreContext),\n        useStoreActions: createStoreActionsHook(StoreContext),\n        useStoreDispatch: createStoreDispatchHook(StoreContext),\n        useStoreRehydrated: createStoreRehydratedHook(StoreContext)\n    };\n}\n/**\r\n * This file has been copied from redux-persist.\r\n * The intention being to support as much of the redux-persist API as possible.\r\n */ function createTransform(inbound, outbound, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    var whitelist = config.whitelist || null;\n    var blacklist = config.blacklist || null;\n    function whitelistBlacklistCheck(key) {\n        if (whitelist && whitelist.indexOf(key) === -1) return true;\n        if (blacklist && blacklist.indexOf(key) !== -1) return true;\n        return false;\n    }\n    return {\n        in: function _in(data, key, fullState) {\n            return !whitelistBlacklistCheck(key) && inbound ? inbound(data, key, fullState) : data;\n        },\n        out: function out(data, key, fullState) {\n            return !whitelistBlacklistCheck(key) && outbound ? outbound(data, key, fullState) : data;\n        }\n    };\n}\n/* eslint-disable react/prop-types */ function StoreProvider(_ref) {\n    var children = _ref.children, store = _ref.store;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StoreContext.Provider, {\n        value: store\n    }, children);\n}\nfunction useLocalStore(modelCreator, dependencies, configCreator) {\n    if (dependencies === void 0) {\n        dependencies = [];\n    }\n    if (configCreator === void 0) {\n        configCreator = null;\n    }\n    var storeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var configRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var store = useMemoOne(function() {\n        var previousState = storeRef.current != null ? storeRef.current.getState() : undefined;\n        var config = configCreator != null ? configCreator(previousState, configRef.current) : undefined;\n        var _store = createStore(modelCreator(previousState), config);\n        configRef.current = config;\n        storeRef.current = _store;\n        return _store;\n    }, dependencies);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return store.getState();\n    }), currentState = _useState[0], setCurrentState = _useState[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        setCurrentState(store.getState());\n        store.subscribe(function() {\n            var nextState = store.getState();\n            if (currentState !== nextState) {\n                setCurrentState(nextState);\n            }\n        });\n    }, [\n        store\n    ]);\n    return [\n        currentState,\n        store.getActions(),\n        store\n    ];\n}\n// React 18 requires the use of the useSyncExternalStore hook for external\ninitializeUseStoreState(use_sync_external_store_shim_with_selector__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStoreWithSelector);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/easy-peasy/dist/index.js\n");

/***/ })

};
;