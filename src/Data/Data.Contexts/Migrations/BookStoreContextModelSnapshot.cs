// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using devdeer.BookStore.Data.Contexts.v1;

#nullable disable

namespace devdeer.BookStore.Data.Contexts.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    partial class BookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("devdeer.BookStore.Data.Entities.AuthorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuthorCreation")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("AuthorCreation");

                    b.Property<DateTime>("AuthorRemoval")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("AuthorRemoval");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("BirthDate")
                        .HasColumnOrder(13);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(30);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .HasColumnOrder(10);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname")
                        .HasColumnOrder(11);

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("Version")
                        .HasColumnOrder(15);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Surname" }, "IX_Authors_Surname");

                    b.ToTable("Authors", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AuthorsHistory");
                                ttb
                                    .HasPeriodStart("AuthorCreation")
                                    .HasColumnName("AuthorCreation");
                                ttb
                                    .HasPeriodEnd("AuthorRemoval")
                                    .HasColumnName("AuthorRemoval");
                            }));
                });

            modelBuilder.Entity("devdeer.BookStore.Data.Entities.BookEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("AuthorId")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("BookCreation")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("BookCreation");

                    b.Property<DateTime>("BookRemoval")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("BookRemoval");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(32);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("Description")
                        .HasColumnOrder(31);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(13);

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("Isbn")
                        .HasColumnOrder(10);

                    b.Property<int>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("Pages")
                        .HasColumnOrder(12);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("Price")
                        .HasColumnOrder(30);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title")
                        .HasColumnOrder(11);

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("Version")
                        .HasColumnOrder(14);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex(new[] { "Title" }, "IX_Books_Title");

                    b.HasIndex(new[] { "Isbn" }, "UX_Books_Isbn")
                        .IsUnique();

                    b.ToTable("Books", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("BooksHistory");
                                ttb
                                    .HasPeriodStart("BookCreation")
                                    .HasColumnName("BookCreation");
                                ttb
                                    .HasPeriodEnd("BookRemoval")
                                    .HasColumnName("BookRemoval");
                            }));
                });

            modelBuilder.Entity("devdeer.BookStore.Data.Entities.BookEntity", b =>
                {
                    b.HasOne("devdeer.BookStore.Data.Entities.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("devdeer.BookStore.Data.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
